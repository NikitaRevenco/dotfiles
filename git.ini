[user]
	name = Nikita Revenco
	email = 154856872+nikitarevenco@users.noreply.github.com
[init]
	defaultBranch = main
[color]
  interactive = true
  branch = true
  status = true
	ui = true
[pull]
	rebase = false
[core]
	editor = nvim
	pager = diff-so-fancy | less --tabs=4 -RF
[alias]
  i = init

  # TODO: learn about rebase
  rb = rebase
  rbad = rebase --committer-date-is-author-date
  rbi = rebase -i
  rbtc = !git theirs `git unmerged` || git resolve-unmerged && (git rbc || git rbs)
  rboc = !git ours `git unmerged` || git reset `git unmerged` && git a . && (git rbc || git rbs)
  rbc = rebase --continue
  rba = rebase --abort
  rbs = rebase --skip

  # most recent commit
  h = !git l -1 $@
  # 20 most recent commits
  r = !git l -20 $@
  # apply changes introduced by a commit from one branch onto current branch
  # git chp <commit>
  chp = cherry-pick
  chpc = cherry-pick --continue
  chpq = cherry-pick --quit
  chpa = cherry-pick --abort

  co = checkout
  # create new branch and switch to it
  cob = checkout -b
  # delete branch then create again
  cobf = "!f() { git brd $1; git cob $1; }; f"
  # checkout previous commit
  col = checkout HEAD~1

  # create empty commit for reasons other than code changes
  cie = commit --allow-empty

  # remove untracked files from cwd, does not remote ignored files
  cl = clean
  # forcefully remove untracked files and directories
  cldf = clean -df

  res = reset
  # g ress {hash}
  ress = reset --soft
  # unstages changes
  resa = reset HEAD
  # stash uncommited changes
  resh = "!f() { git stash && git reset --hard $@; }; f"
  # stash uncommited changes and hard reset to upstream
  reshu = !git resh `git upstream`
  # discard most recent commit, local changes are stashed
  cundoh = !git stash && git reset HEAD^1 --hard

  tags = tag -l

  # unstage latest commit while keeping changes in cwd
  cundo = reset HEAD^1
  ci = commit -m
  # stage changes from 1 file and commit message
  cia = "!f() { git add \"$@\" && git commit -m \"${@: -1}\"; }; f"
  # stage changes from all files and commit message
  cim = "!f() { git add --all && git commit -m \"$1\"; }; f"
  # stage changes from all files, commit message and push
  cimp = "!f() { git add --all && git commit -m \"$1\" && git push; }; f"
  # change commit message of previous commit (Don't do after pushing)
  cam = commit --amend
  # stages all modified files before amending
  cama = commit --amend -a
  rf = reflog
  rfe = reflog expire --expire=now --all
  rv = revert
  rvc = revert --continue
  rva = revert --abort

  m = merge --no-edit
  unm = reset --merge

  # show
  s = show --color
  # show inline
  sw = show --color --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'
  # show summary
  sf = show --color -C --stat

  # diff
  d = diff --color
  # diff inline update
  dw = diff --color --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'
  # staged diff
  ds = !git d --staged $@
  # staged diff summary
  dsf = !git d --staged -C --stat $@
  # staged diff inline update
  dsw = !git d --staged --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+' $@

  rs = restore
  rsc = restore --staged

  # rich git diff
  lp = log -m --color -p
  # summary changes per file
  lf = log -m --color -C --stat
  # pretty graph with branches
  lg = log -m --simplify-merges --color --graph --pretty=format:'%Cred%h%Creset %s %Cgreen(%ar) %Cblue%an <%ae>%Creset' --abbrev-commit --date=relative
  # pretty graph with branches only for upstream
  lgu = !git lg `git upstream` $@
  # oneline log
  l = log -m --simplify-merges --color --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %Cblue%an <%ae>%Creset' --abbrev-commit --date=relative
  # hashes only
  lc = "!f() { git log $* | grep '^commit ' | cut -f 2 -d ' '; }; f"

  f = fetch

  ps = push
  psu = push -u
  psom = push -u origin main
  pso = push origin
  # Force push
  psf = push -f
  # Pushes changes to remote branch $1 using current branch
  psn = "!f() { git ps $1 `git brc`; }; f"
  # Force pushes changes to remote branch $1 using current branch
  psnf = "!f() { git psf $1 `git brc`; }; f"
  # Force pushes changes to upstream branch $1 using current branch
  psfun = "!f() { git psu -f $1 `git brc`; }; f"
  # Pushes changes to upstream branch $1 using current branch
  psun = "!f() { git psu $1 `git brc`; }; f"

  pl = pull
  plo = pull origin
  plom = pull origin main

  bs = bisect
  bsr = bisect reset
  bsb = bisect bad
  bsg = bisect good

  s = status

  a = add --all
  af = add --all -f
  # interactive
  ap = add -p

  # squash N commits
  sq = !git squash $1
  # squash N commits and force push
  sqpsf = !git squash $1 && git psf

  sh = stash
  shp = stash pop
  shl = stash list
  shd = stash drop
  shc = stash clear
  sha = stash apply

  br = branch
  # get current branch name
  brn = rev-parse --abbrev-ref HEAD
  # delete branch forcefully
  brd = branch -D
  # which branches contain this commit?
  brco = branch --contains
  bruup = branch --unset-upstream
  brup = branch --set-upstream

  re = remote
  ra = remote add
  rrm = remote rm
  rv = remote -v
  rao = remote add origin
  # remove all remotes
  rc = "!git remote | xargs -n1 git remote remove"

  bl = blame

  # git change-commits GIT_COMMITTER_NAME "old name" "new name"
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "
  # from https://help.github.com/articles/remove-sensitive-data
  remove-file = "!f() { git filter-branch -f --index-filter \"git rm --cached --ignore-unmatch $1\" --prune-empty --tag-name-filter cat -- --all; }; f"

  findemptydirs = !"find . -type d -empty ! -path ./tmp/\\*"
  deleteemptydirs = !"find . -type d -empty ! -path ./tmp/\\* -exec rmdir {} \\;"
  fsize = "!f() { \
  git ls-files 2>/dev/null | xargs -r du -h 2>/dev/null | sort -h | awk '{printf \"\\033[0;32m%s\\033[0m %s\\n\", $1, substr($0, index($0, $2))}' | bat; \
}; f"
  loc = "!f() { \
  dir=$(pwd); \
  lock_patterns=\"package-lock.json|yarn.lock|pnpm-lock.yaml|npm-shrinkwrap.json|composer.lock|Gemfile.lock|Podfile.lock|Cargo.lock|.lock|.yarn.lock|.pnpm-lock.yaml|.npm-lock.json|.yarnrc.yml|.yarnrc.json|.package-lock.json|.npmrc|.pnpmfile.cjs|.lockfile|.flutter-plugins|.flutter-plugins-dependencies|.flutter-plugins-dependencies.json|.flutter-plugins-dependencies.lock|.flutter-plugins-dependencies.lock.json|.flutter-plugins-dependencies.yaml|.flutter-plugins.lock|.flutter-plugins.yaml|.flutter-plugins.json|.flutter-plugins.lock.json|.flutter-plugins.lock.yaml\"; \
  git ls-files 2>/dev/null | grep -v -E \"$lock_patterns\" | xargs -r wc -l 2>/dev/null | awk '{if ($1 > 0) print $0}' | sort -n | awk '{printf \"\\033[0;32m%s\\033[0m %s\\n\", $1, substr($0, index($0, $2))}' | bat; \
}; f"
[interactive]
	diffFilter = diff-so-fancy --patch
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = 11
	frag = magenta bold
	func = 146 bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
